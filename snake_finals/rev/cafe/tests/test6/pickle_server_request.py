import dill

resp = b'HTTP/1.1 200 OK\r\nServer: Werkzeug/3.1.3 Python/3.13.1\r\nDate: Fri, 06 Dec 2024 21:20:05 GMT\r\nTransfer-Encoding: gzip\r\nContent-Disposition: attachment; filename=headers.pkl\r\nContent-Type: application/octet-stream\r\nTransfer-Encoding: chunked\r\nConnection: close\r\n\r\nd\r\n\x80\x04\x95\xa0\x04\x00\x00\x00\x00\x00\x00\x8c\n\r\n21\r\ndill._dill\x94\x8c\x0c_create_type\x94\x93\x94(h\x00\x8c\n\r\n42\r\n_load_type\x94\x93\x94\x8c\x04type\x94\x85\x94R\x94\x8c\x11EnsuringRichCaf\xc3\xa8\x94h\x04\x8c\x06object\x94\x85\x94R\x94\x85\x94}\x94(\x8c\n\r\n11b\r\n__module__\x94\x8c\x08__main__\x94\x8c\x0f__firstlineno__\x94K\r\x8c\x08__init__\x94h\x00\x8c\x10_create_function\x94\x93\x94(h\x00\x8c\x0c_create_code\x94\x93\x94(C\x02\x02\x01\x94K\x03K\x00K\x00K\x03K\x03K\x03C0\x95\x00U\x02R\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x015\x01\x00\x00\x00\x00\x00\x00U\x00l\x01\x00\x00\x00\x00\x00\x00\x00\x00g\x00\x94N\x8c\x05latin\x94\x86\x94\x8c\x06encode\x94\x8c\x05agent\x94\x86\x94\x8c\x04self\x94\x8c\x04host\x94h\x1b\x87\x94\x8c\x0e/app/server.py\x94h\x11\x8c\x1aEnsuringRichCaf\xc3\xa8.__init__\x94K\x0eC\x12\x80\x00\xd8\x15\x1a\x97\\\x91\\\xa0\'\xd3\x15*\x88\x04\x8d\n\r\ndb\r\n\x94C\x00\x94))t\x94R\x94}\x94\x8c\x08__name__\x94h\x0fsh\x11NNt\x94R\x94}\x94}\x94(\x8c\x0f__annotations__\x94}\x94\x8c\x0c__qualname__\x94h!u\x86\x94b\x8c\t__check__\x94h\x13(h\x15(C\x08\x02\x01\x08\x01T\x01z\x02\x94K\x02K\x00K\x00K\x04K\x05K\x03C\xe8\x95\x00S\x01S\x00K\x00n\x02U\x00R\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00[\x04\x00\x00\x00\x00\x00\x00\x00\x00R\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x025\x01\x00\x00\x00\x00\x00\x00-\x00\x00\x00U\x01-\x00\x00\x00U\x00l\x04\x00\x00\x00\x00\x00\x00\x00\x00[\n\r\nd4\r\n\x00\x00\x00\x00\x00\x00\x00\x00R\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00U\x02R\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00U\x00R\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x005\x01\x00\x00\x00\x00\x00\x00R\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x005\x00\x00\x00\x00\x00\x00\x00S\x035\x02\x00\x00\x00\x00\x00\x00n\x03U\x03S\x04S\x05-\x08\x00\x00:\x02\x00\x00$\x00\x94(NK\x00\x8c\x06eb000b\x94\x8c\x06little\x94K\x02K\xa0t\x94(\x8c\x07hashlib\x94h\x1b\x8c\x05bytes\x94\x8c\x07fromhex\x94\x8c\x05magic\x94\x8c\x03int\x94\x8c\n\r\n7b\r\nfrom_bytes\x94\x8c\x06sha256\x94\x8c\x06digest\x94t\x94(h\x1d\x8c\x05nonce\x94h6\x8c\x01n\x94t\x94h h0\x8c\x1bEnsuringRichCaf\xc3\xa8.__check__\x94K\x11CW\x80\x00\xdb\x08\x16\xd8\x15\x19\x97Z\x91Z\xa4%\xa7-\xa1-\xb0\x08\xd3"9\xd1\x159\xb8E\xd1\x15A\x88\x04\x8c\n\r\nf6\r\n\xdc\r\x10\x8f^\x89^\x98G\x9fN\x99N\xa84\xaf:\xa9:\xd3\x1c6\xd7\x1c=\xd1\x1c=\xd3\x1c?\xc0\x18\xd3\rJ\x88\x01\xe0\x0f\x10\x901\x98\x03\x918\x89|\xd0\x08\x1b\x94h#))t\x94R\x94}\x94h\'h\x0fsh0NNt\x94R\x94}\x94}\x94(h,}\x94h.hBu\x86\x94bhF(\x8c\x03int\x94h\x04h:\x85\x94R\x94\x8c\x05bytes\x94h\x04h7\x85\x94R\x94u0\x8c\x15__static_attributes__\x94h\x1bh9\x86\x94\x8c\x07__doc__\x94N\x8c\r__slotnames__\x94]\x94ut\x94R\x94\x8c\x08builtins\x94\x8c\x07setattr\x94\x93\x94hYh.h\x08\x87\x94R0)\x81\x94}\x94h\x1bC\x08\xf5\xb2\tI\x8b\xfa\xd6P\x94sb.\r\n0\r\n\r\n'

headers, body = resp.split(b'\r\n\r\n', 1)
# print(body)
l, body = body.split(b'\r\n', 1)
l = int(l.decode(), 16)
# print(l)
p = b''
while l!= 0:
	p += body[:l]
	# print(p)
	body = body[l + 2:]
	l, body = body.split(b'\r\n', 1)
	l = int(l.decode(), 16)

# print(p)
# p = b'\x80\x04\x95\xa0\x04\x00\x00\x00\x00\x00\x00\x8c\n\r\n21\r\ndill._dill\x94\x8c\x0c_create_type\x94\x93\x94(h\x00\x8c\n\r\n42\r\n_load_type\x94\x93\x94\x8c\x04type\x94\x85\x94R\x94\x8c\x11EnsuringRichCaf\xc3\xa8\x94h\x04\x8c\x06object\x94\x85\x94R\x94\x85\x94}\x94(\x8c\n\r\n11b\r\n__module__\x94\x8c\x08__main__\x94\x8c\x0f__firstlineno__\x94K\r\x8c\x08__init__\x94h\x00\x8c\x10_create_function\x94\x93\x94(h\x00\x8c\x0c_create_code\x94\x93\x94(C\x02\x02\x01\x94K\x03K\x00K\x00K\x03K\x03K\x03C0\x95\x00U\x02R\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x015\x01\x00\x00\x00\x00\x00\x00U\x00l\x01\x00\x00\x00\x00\x00\x00\x00\x00g\x00\x94N\x8c\x05latin\x94\x86\x94\x8c\x06encode\x94\x8c\x05agent\x94\x86\x94\x8c\x04self\x94\x8c\x04host\x94h\x1b\x87\x94\x8c\x0e/app/server.py\x94h\x11\x8c\x1aEnsuringRichCaf\xc3\xa8.__init__\x94K\x0eC\x12\x80\x00\xd8\x15\x1a\x97\\\x91\\\xa0\'\xd3\x15*\x88\x04\x8d\n\r\ndb\r\n\x94C\x00\x94))t\x94R\x94}\x94\x8c\x08__name__\x94h\x0fsh\x11NNt\x94R\x94}\x94}\x94(\x8c\x0f__annotations__\x94}\x94\x8c\x0c__qualname__\x94h!u\x86\x94b\x8c\t__check__\x94h\x13(h\x15(C\x08\x02\x01\x08\x01T\x01z\x02\x94K\x02K\x00K\x00K\x04K\x05K\x03C\xe8\x95\x00S\x01S\x00K\x00n\x02U\x00R\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00[\x04\x00\x00\x00\x00\x00\x00\x00\x00R\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x025\x01\x00\x00\x00\x00\x00\x00-\x00\x00\x00U\x01-\x00\x00\x00U\x00l\x04\x00\x00\x00\x00\x00\x00\x00\x00[\n\r\nd4\r\n\x00\x00\x00\x00\x00\x00\x00\x00R\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00U\x02R\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00U\x00R\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x005\x01\x00\x00\x00\x00\x00\x00R\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x005\x00\x00\x00\x00\x00\x00\x00S\x035\x02\x00\x00\x00\x00\x00\x00n\x03U\x03S\x04S\x05-\x08\x00\x00:\x02\x00\x00$\x00\x94(NK\x00\x8c\x06eb000b\x94\x8c\x06little\x94K\x02K\xa0t\x94(\x8c\x07hashlib\x94h\x1b\x8c\x05bytes\x94\x8c\x07fromhex\x94\x8c\x05magic\x94\x8c\x03int\x94\x8c\n\r\n7b\r\nfrom_bytes\x94\x8c\x06sha256\x94\x8c\x06digest\x94t\x94(h\x1d\x8c\x05nonce\x94h6\x8c\x01n\x94t\x94h h0\x8c\x1bEnsuringRichCaf\xc3\xa8.__check__\x94K\x11CW\x80\x00\xdb\x08\x16\xd8\x15\x19\x97Z\x91Z\xa4%\xa7-\xa1-\xb0\x08\xd3"9\xd1\x159\xb8E\xd1\x15A\x88\x04\x8c\n\r\nf6\r\n\xdc\r\x10\x8f^\x89^\x98G\x9fN\x99N\xa84\xaf:\xa9:\xd3\x1c6\xd7\x1c=\xd1\x1c=\xd3\x1c?\xc0\x18\xd3\rJ\x88\x01\xe0\x0f\x10\x901\x98\x03\x918\x89|\xd0\x08\x1b\x94h#))t\x94R\x94}\x94h\'h\x0fsh0NNt\x94R\x94}\x94}\x94(h,}\x94h.hBu\x86\x94bhF(\x8c\x03int\x94h\x04h:\x85\x94R\x94\x8c\x05bytes\x94h\x04h7\x85\x94R\x94u0\x8c\x15__static_attributes__\x94h\x1bh9\x86\x94\x8c\x07__doc__\x94N\x8c\r__slotnames__\x94]\x94ut\x94R\x94\x8c\x08builtins\x94\x8c\x07setattr\x94\x93\x94hYh.h\x08\x87\x94R0)\x81\x94}\x94h\x1bC\x08\xf5\xb2\tI\x8b\xfa\xd6P\x94sb.'
x = dill.loads(p)

print(x)
print(x.__check__(b'B' * 42))
print(x.magic)
print(x.magic.hex())
